}
return(growthline)
}
# plot(growthline,xlab="age",ylab="height",
#      xlim=c(0,200),ylim=c(5,35),type="l",col="blue",)
#If we haven't started growing, stay at pregrowthheight
#If we're past the age to start growing, growth happens
#But we want the minimum of growth and final height so we don't grow forever
allplots=list(1:10)
for(i in 1:10){
allplots[[i]] <- plotgrowth(i*1000)
}
allplots[[1]]
plotpoints=list(1:10)
for(i in 1:10){
plotpoints[[i]] <- allplots[[i]][1:20]
}
plot(plotpoints[[1]],xlab="age",ylab="height",
xlim=c(1,20),ylim=c(7,32),type="l",col="blue",)
for(i in 2:10){
lines(plotpoints[[i]])
}
points(age,height, pch=19)
max(plotpoints)
max(plotpoints[[1]])
max(plotpoints[[2]])
max(plotpoints[[3]])
max(plotpoints[[4]])
plot(c(0,10),c(0,5), pch='*',col='red')
lines(x=c(0,5,7,10), y=c(3,1,5,2))
hist(sigma)
hist(error)
hist(tooerror)
hist(tooerror,breaks=20)
rnorm(1,0,error[1])
errorsum = numeric(10800)
for(i in 1:10800){
errorsum[i]<-rnorm(1,0,error[i])
}
mean(errorsum)
errorsum = numeric(10800)
for(i in 1:10800){
errorsum[i]<-rnorm(1,0,error[i])
}
mean(errorsum)
errorsum = numeric(10800)
for(i in 1:10800){
errorsum[i]<-rnorm(1,0,error[i])
}
mean(errorsum)
errorsum = numeric(10800)
for(i in 1:10800){
errorsum[i]<-rnorm(1,0,error[i])
}
mean(errorsum)
f = rnorm(1000,0,error[1000])
mean(f)
max(f)
min(f)
f = rnorm(10000,0,error[2000])
mean(f)
max(f)
min(f)
error[2000]
error[3000]
mean(error[3000:3999])
mean(error[4000:4999])
mean(error[5000:5999])
mean(error)
mean(tooerror)
hist(error)
hist(tooerror)
height
tooheight<- "
model{
for(i in 1:15){
mu[i] <- min((a+max(0,b*(i-t))),(a+b*d))
height[i] ~ dnorm(mu[i],tau)
}
a ~ dnorm(11,2)
b ~ dunif(1,2)
t ~ dlnorm(1.5,.3)
d ~ dnorm(10,2)
stau ~ dgamma(.01,.01)
sigma <- 1/sqrt(tau)
}
"
#born with A, start at T, grow for D at rate B
library(rjags)
toogrowth = jags.model(textConnection(tooheight),data=list(age=age, height=height))
s2 = coda.samples(toogrowth, c("a","t","d","b","stau"),11000)  # Changed sigma to stau
ss2 <- as.data.frame(s2[[1]])
ss2 <- unlist(ss2)
ss2numeric <- as.numeric(ss2)
toobirthheight = ss2numeric[200:11000]
toogrowthrate = ss2numeric[11200:22000]
toogrowthyears = ss2numeric[22200:33000]
tooerror = ss2numeric[33200:44000]
toogrowthstartage = ss2numeric[44200:55000]
hist(tooerror)
tooerror[500]
toogrowth = jags.model(textConnection(tooheight),data=list(age=age, height=height))
s2 = coda.samples(toogrowth, c("a","t","d","b","sigma","tau"),11000)
ss2 <- as.data.frame(s2[[1]])
ss2 <- unlist(ss2)
ss2numeric <- as.numeric(ss2)
toobirthheight = ss2numeric[200:11000]
toogrowthrate = ss2numeric[11200:22000]
toogrowthyears = ss2numeric[22200:33000]
tooerror = ss2numeric[33200:44000]
toogrowthstartage = ss2numeric[44200:55000]
tootau = ss2numeric[55200:66000]
hist(tootau)
hist(toobirthheight)
hist(toogrowthrate)
max(toogrowthrate)
hist(toogrowthstartage)
toogrowth = jags.model(textConnection(tooheight),data=list(age=age, height=height))
s2 = coda.samples(toogrowth, c("a","t","d","b","sigma"),11000)
ss2 <- as.data.frame(s2[[1]])
ss2 <- unlist(ss2)
ss2numeric <- as.numeric(ss2)
toobirthheight = ss2numeric[200:11000]
toogrowthrate = ss2numeric[11200:22000]
toogrowthyears = ss2numeric[22200:33000]
tooerror = ss2numeric[33200:44000]
toogrowthstartage = ss2numeric[44200:55000]
hist(toogrowthstartage)
toogrowth = jags.model(textConnection(tooheight),data=list(age=age, height=height))
s2 = coda.samples(toogrowth, c("a","t","d","b","sigma","tau"),11000)
ss2 <- as.data.frame(s2[[1]])
ss2 <- unlist(ss2)
ss2numeric <- as.numeric(ss2)
toobirthheight = ss2numeric[200:11000]
toogrowthrate = ss2numeric[11200:22000]
toogrowthyears = ss2numeric[22200:33000]
tooerror = ss2numeric[33200:44000]
toogrowthstartage = ss2numeric[44200:55000]
tootau = ss2numeric[55200:66000]
hist(tootau)
hist(tooerror)
toogrowthstopage=toogrowthstartage+toogrowthyears
hist(1/sqrt(tootau))
wungrowth = jags.model(textConnection(wunheight),data=list(age=age, height=height))
s = coda.samples(wungrowth, c("a","t","d","b","sigma","tau"),11000)  # You had "wungrowth" set as "jm" before!
# s <- window(s,201,11000)
ss1 <- as.data.frame(s[[1]])
ss1 <- unlist(ss1)
#  ss1 <- gsub(".", "", ss1)
ssnumeric <- as.numeric(ss1)
birthheight = ssnumeric[200:11000]
growthrate = ssnumeric[11200:22000]
growthyears = ssnumeric[22200:33000]
error = ssnumeric[33200:44000]
growthstartage = ssnumeric[44200:55000]
wuntau=ssnumeric[55200:66000]
hist(birthheight,main="Height at birth (A)")
hist(wuntau,main="Precision (Tau)")
quantile(wuntau,c(.025,.975))
dat = read.csv("http://www.stat.yale.edu/~jtc5/238/takehome1.csv")
attach(dat)
height
unfairgame <- function(x){   # Same unfair game as before, but returning just one value per game
unfairmoney=0
if(runif(1)<.495){unfairmoney = 1 }
else{unfairmoney = -1}
return(unfairmoney)}
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame(1)
unfairgame <- function{   # Same unfair game as before, but returning just one value per game
unfairmoney=0
if(runif(1)<.495){unfairmoney = 1 }
else{unfairmoney = -1}
return(unfairmoney)}
m = matrix(runif(100),10,10)
image(m)
m = matrix(runif(100),10,10)
image(m,col="blue")
m = matrix(runif(100),10,10)
image(m,col="blue")
m = matrix(runif(100),10,10)
image(m)
m = matrix(runif(100),10,10)
image(m)
.385*(-.810)+.615*.490
745-255
.346*(-.410) + .654*(.240)
hist(birthheight,main="Height at birth (A)",xlab="Height")
hist(growthrate,main="Growth rate (B)",xlab="Growth Rate")
hist(growthyears,main="Years of growth (D)",xlab="Years")
# hist(error,main="Measurement error (gamma)")
hist(growthstartage,main="Age at start of growth (T)",xlab="Age")
hist(wuntau,main="Precision (Tau)",xlab="Tau")
hist(growthstopage,main="Age at end of growth period",xlab="Age")
(length (toogrowthstopage[toogrowthstopage > 20))
(length (toogrowthstopage[toogrowthstopage > 20])
(length(toogrowthstopage[toogrowthstopage > 20])
length(toogrowthstopage[toogrowthstopage > 15])/length(toogrowthstopage)
length(toogrowthstopage[toogrowthstopage > 20])/length(toogrowthstopage)
length(toogrowthstopage[toogrowthstopage > 20])
plot(plotpoints[[1]],main="Sample Growth Curves for Too",xlab="age",ylab="height",
xlim=c(1,20),ylim=c(7,32),type="l",col="blue",)
for(i in 2:10){
lines(plotpoints[[i]])
}
points(age,height, pch=19)
dat = read.csv("http://www.stat.yale.edu/~jtc5/238/takehome2.csv")
attach(dat)
plot(plotpoints[[1]],main="Sample Growth Curves for Too",xlab="age",ylab="height",
xlim=c(1,20),ylim=c(7,32),type="l",col="blue",)
for(i in 2:10){
lines(plotpoints[[i]])
}
points(age,height, pch=19)
complexgame=function(x){
money=numeric(x)
money[1]=0
for(i in 2:x){
if(money[i-1]%%3==0){money[i] <- (money[i-1]+coina(1))}
else{money[i] <- (money[i-1]+coinb(1))}
}
plot(money)
u <- money
print(length(u[u%%3 == 0]))
print(money[x])}
complexgame(100000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
complexgame(10000)
k =c("a","t","d","b","sigma","tau")
sort(k)
height
plotpoints[[1]]
plotpoints[[2]]
plotpoints[[3]]
rnorm(4,sd=.5)
rnorm(5)
runif(1)
runif(1000)
runif(10)
runif(10, 100)
rand(1,1000000)
rnum(1,1000000)
runif(1,1000000)
x = runif(1,1,1000000)
x = runif(1,1,1000000)
x
x
x = runif(1,1,1000000)
x
x = runif(1,1,1000000)
x
x = runif(1,1,1000000)
x
# TO DO
# continue tweaking algorithm numbers
# add ventilations
# Search for influence of airflow on ETCO2, translate rate/depth into airflow and then airflow into ETCO2?
# Search for more papers to set better parameters
# what should the max depth be?
# IMPORT THE CSV FILE
setwd("C:/Users/Aaron/Dropbox/code")
setwd('404')
baxter = read.csv("baxter.csv")
angie = read.csv("angie.csv")
charlie = read.csv("charlie.csv")
chocolate = read.csv("chocolate.csv")
daniel = read.csv("daniel.csv")
farfell = read.csv("farfell.csv")
# CLEAN THE DATASET
test <- function(data){
data <- head(data, n = 100)
}
clean <- function(data){
time <- data[1]
depth <- data[2]
depth <- depth[ depth > 0 & depth < 80]
time <- head(time, n = length(depth))
data <- data.frame(time, depth)
}
# SET VARIABLES FOR CANOGRAPHY SCORING
mindepth = 4.0
maxdepth = 5.5
depthscore = 2.5
maxalg <- function(depth){
depth = depth/10
if (mindepth < depth & depth < maxdepth){
return(depthscore)
}
if (depth > maxdepth){
return(depthscore-(10*(depth-maxdepth)))
# serious penalty for too-deep compression, you could break something
}
else{
return(depthscore-(sqrt(mindepth)-(0.25*sqrt(depth))))
# probably not penalizing very shallow compressions steeply enough
}
}
minalg <- function(depth){
depth = depth/10
recoilscore = 1
if (depth == 0){
return(recoilscore)
}
else
return(recoilscore-depth) # score decreases linearly with partial recoil
}
timealg <- function(current, last){
rate = (current - last)/100
ratescore = 1
goodrates = c(0.5, 0.6)
weakrates = c(0.3, 0.8)
if (min(goodrates) < rate && rate < max(goodrates)){
return(ratescore)
}
if (min(weakrates) < rate && rate < max(weakrates)){
return(ratescore-(2*abs(mean(weakrates)-rate)))
}
else
return(0)
}
# capscore function
capscore <- function(user, start){
allmax = NULL
allmin = NULL
allscore = NULL
score = start # try 20 mmHg to start with
time <- function(i){
user[i,1]
}
depth <- function(i){
user[i,2]
}
for (i in 3:nrow(user)){
score = (score - 0.9) # set this constant to whatever
if(score > 500){
riserate = 5   # recovery rate is faster when mmHg > 10
}
if(score <= 500){
riserate = 3   # recovery rate is slower when mmHg < 10
}
if(depth(i-2) < depth(i-1) & depth(i) < depth(i-1)){
allmax = rbind(allmax, c(depth(i-1), time(i-1)))
score = score + riserate*(maxalg(depth(i-1)))    #assuming we're measuring in cm, easy change
+ riserate*(timealg(tail(allmax, n=1),
head(tail(allmax, n=2), n=1)))
}
if(depth(i-2) > depth(i-1) & depth(i) > depth(i-1)){
allmin = rbind(allmin, c(depth(i-1), time(i-1)))
score = score + (riserate*minalg(depth(i-1)))
}
#   if(score > 1250){  # whatever corresponds to a score of 25 mmHg or more
#     score = 1250  # we could also drop the score a few points to allow "rewards" for continued good compressions
#   }
if(score < 250){  # Whatever corresponds to a score of 5 mmHg or less
return("point of no return")
}
allscore <- c(allscore, score)
}
return(allscore)
#   plot(allscore)
#   return(colMeans(allmax, dims = 1))
}
plot(capscore(clean(daniel), 3000))
lines(capscore(baxter, 3000), col="blue")
lines(angscore(angie, 3000), col="red")
lines(capscore(angie, 3000), col="red")
lines(capscore(chocolate, 3000), col="green")
lines(capscore(chocolate, 4000), col="green")
lines(capscore(farfell, 3000), col="green")
lines(capscore(farfell, 4000), col="green")
capscore(farfell, 5000)
capscore(farfell, 6000)
capscore(farfell, 10000)
mean(farfell[2])
farfell[2]
lines(capscore(charlie, 3000))
lines(capscore(charlie, 5000))
lines(capscore(charlie, 10000))
plot(capscore(charlie, 10000))
plot(capscore(charlie, 3000))
# TO DO
# continue tweaking algorithm numbers
# add ventilations
# Search for influence of airflow on ETCO2, translate rate/depth into airflow and then airflow into ETCO2?
# Search for more papers to set better parameters
# what should the max depth be? The min?
# divide everything by 50?
# IMPORT THE CSV FILE
setwd("C:/Users/Aaron/Dropbox/code")
setwd('404')
baxter = read.csv("baxter.csv")
angie = read.csv("angie.csv")
charlie = read.csv("charlie.csv")
chocolate = read.csv("chocolate.csv")
daniel = read.csv("daniel.csv")
farfell = read.csv("farfell.csv")
# CLEAN THE DATASET
test <- function(data){
data <- head(data, n = 100)
}
clean <- function(data){
time <- data[1]
depth <- data[2]
depth <- depth[ depth > 0 & depth < 80]
time <- head(time, n = length(depth))
data <- data.frame(time, depth)
}
# SET VARIABLES FOR CANOGRAPHY SCORING
mindepth = 4.0
maxdepth = 5.5
depthscore = 2.5
maxalg <- function(depth){
depth = depth/10
if (mindepth < depth & depth < maxdepth){
return(depthscore)
}
if (depth > maxdepth){
return(depthscore-(10*(depth-maxdepth)))
# serious penalty for too-deep compression, you could break something
}
else{
return(depthscore-(sqrt(mindepth)-(0.25*sqrt(depth))))
# probably not penalizing very shallow compressions steeply enough
}
}
minalg <- function(depth){
depth = depth/10
recoilscore = 1
if (depth == 0){
return(recoilscore)
}
else
return(recoilscore-depth) # score decreases linearly with partial recoil
}
timealg <- function(current, last){
rate = (current - last)/100
ratescore = 1
goodrates = c(0.5, 0.6)
weakrates = c(0.3, 0.8)
if (min(goodrates) < rate && rate < max(goodrates)){
return(ratescore)
}
if (min(weakrates) < rate && rate < max(weakrates)){
return(ratescore-(2*abs(mean(weakrates)-rate)))
}
else
return(0)
}
# capscore function
capscore <- function(user, start){
user = clean(user)
allmax = NULL
allmin = NULL
allscore = NULL
score = start # try 20 mmHg to start with
time <- function(i){
user[i,1]
}
depth <- function(i){
user[i,2]
}
for (i in 3:nrow(user)){
score = (score - 0.9) # set this constant to whatever
if(score > 500){
riserate = 5   # recovery rate is faster when mmHg > 10
}
if(score <= 500){
riserate = 3   # recovery rate is slower when mmHg < 10
}
if(depth(i-2) < depth(i-1) & depth(i) < depth(i-1)){
allmax = rbind(allmax, c(depth(i-1), time(i-1)))
score = score + riserate*(maxalg(depth(i-1)))    #assuming we're measuring in cm, easy change
+ riserate*(timealg(tail(allmax, n=1),
head(tail(allmax, n=2), n=1)))
}
if(depth(i-2) > depth(i-1) & depth(i) > depth(i-1)){
allmin = rbind(allmin, c(depth(i-1), time(i-1)))
score = score + (riserate*minalg(depth(i-1)))
}
#   if(score > 1250){  # whatever corresponds to a score of 25 mmHg or more
#     score = 1250  # we could also drop the score a few points to allow "rewards" for continued good compressions
#   }
if(score < 250){  # Whatever corresponds to a score of 5 mmHg or less
return("point of no return")
}
allscore <- c(allscore, score)
}
return(allscore)
print(colMeans(allmax, dims = 1))
}
plot(capscore(clean(daniel), 3000))
lines(capscore(baxter, 3000), col="blue")
lines(capscore(angie, 3000), col="red")
lines(capscore(charlie, 3000), col="green")
lines(capscore(chocolate, 3000), col="green")
lines(capscore(farfell, 3000), col="yellow")
