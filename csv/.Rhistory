found? = urls[7]
links = urls[4]
site_types = urls[5]
url_types = urls[6]
url_found = urls[7]
url_found
which(grepl("institutional", site_types))
which(grep("institutional", site_types))
grepl("institutional", site_types)
site_types
grepl("institutional site", site_types)
urls[urls$site_types == "institutional site"]
urls[urls$site_types == "institutional site", ]
urls
urls = data.frame("year", "issue", "page", "url",
"site_type", "url_type", "found")
urls
urls = read.csv("apsr.csv")
urls.as.data.frame
as.data.frame(urls)
urls
years = urls[1]
issues = urls[2]
urls[urls=="institutional Site"]<-"Institutional Site"
summary(urls)
urls[urls=="institutional Site"]<-"Institutional Site"
summary(urls)
"site_type", "url_type", "found")
urls[urls=="institutional site"]<-"Institutional Site"
summary(urls)
urls[urls==NA]<-"Institutional Site"
summary(urls)
colnames(urls) <- c("year", "issue", "page", "url",
"site_type", "url_type", "found")
urls
head(urls,1)
which(urls[,4] == NA)
which(urls[4] == NA)
which(urls[4] == "Institutional site")
which(urls[5] == "Institutional site")
which(urls[,5] == NA)
which(urls[5] == NA)
(1:nrow(urls))[urls[5] == NA]
urls = read.csv("apsr.csv")
colnames(urls) <- c("year", "issue", "page", "url",
"site_type", "url_type", "found")
which(urls[5] == "institutional site")
urls[5,611]
urls[5,1]
urls[5,2]
urls[5,3]
urls[611,5]
urls[611,5] =
"Institutional site"
urls[urls[1]==2000]
length(urls[urls[1]==2000])/7
length(urls(and((urls[1]==2000),(urls[7]=="Information found"))))
length(urls(urls[1]==2000,urls[7]=="Information found"))
length(urls[urls[1]==2000,urls[7]=="Information found"])
length(urls[urls[1]==2000,urls[6]=="Information found"])
length(urls[urls[1]==2000,urls[7]=="Information found"])
urls[7]
urls[urls[1]==2000,urls[7]=="Information found"]
urls[urls[1]==2000,urls[2]==1]
colnames(urls) <- c("year", "issue", "page", "url",
"site_type", "url_type", "found")
which(urls$year == 2000, urls$found == "Information found")
head(urls,1)
which(urls$year == 2000, urls$found == "Page not found")
urls$year %in% urls$year[which(urls$found == "Information found")]
length(urls$year %in% urls$year[which(urls$found == "Information found")])
head(urls,5)
which(urls$year == 2000)
which(urls$found == "Page not found")
which(urls$found == "Information found")
urls$year[which(urls$found == "Information found")]
urls[urls$year == 2000 & urls$found = "Information found"]
urls[urls$year == 2000 & urls$found == "Information found"]
which[urls$year == 2000 & urls$found == "Information found"]
which[(urls$year == 2000) & (urls$found == "Information found")]
which[urls$found == "Information found"]
urls[urls$found == "Information found"]
urls[urls[7] == "Information found"]
urls[urls[1] == 2000 & urls[7] == "Information found"]
length(urls[urls[1]==2000 & urls[7]=="Information found"])/7
percentages = NULL
for (i in 2000:2013){
percentages[i-1999] <-
length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])
}
percentages
plot(percentages)
par(mar)
par("mar")
par(mar=c(1,1,1,1))
plot(percentages)
hist(percentages)
histinfo<-hist(percentages)
histinfo
barplot(percentages)
barplot(percentages,main = "Percentage of information found by year")
barplot(percentages,main = "Percentage of informative links by year")
xlab = "Year")
barplot(percentages,
main = "Percentage of informative links by year",
xlab = "Year")
barplot(percentages,
main = "Percentage of informative links by year",
xlab = "Year",
ylab = "Percentage")
for (i in 2000:2013){
percentages[i-1999] <-
((length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])), i)
}
for (i in 2000:2013){
percentages[i-1999] <-
c(length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])), i)
}
for (i in 2000:2013){
percentages[i-1999] <-
c(length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i]), i)
}
warnings()
percentages = numeric(0)
for (i in 2000:2013){
percentages[i-1999] <-
c(length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i]), i)
}
warnings()
percentages
x = numeric(0)
x
x[1] = c(1,2)
x(1) = c(1,2)
x = list()
x
x[1] = c(1,2)
x(1) = c(1,2)
rbind(x,c(1,2))
rbind(x,c(1,2))
rbind(x,c(1,2))
x = rbind(x,c(1,2))
x
x = rbind(x,c(1,2))
x
percentages = numeric(0)
for (i in 2000:2013){
percentages <-
rbind(percentages,
c(length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i]), i))
}
percentages
plot(percentages)
barplot(percentages,
main = "Percentage of informative links by year",
xlab = "Year",
ylab = "Percentage")
percount <-table(percentages)
percount
barplot(percount)
plot(percentages)
plot(percentages[1],percentages[2])
barplot(percentages[1],percentages[2])
for (i in 2000:2013){
percentages <-
rbind(percentages,
c(i, length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])))
}
percentages
percentages = numeric(0)
for (i in 2000:2013){
percentages <-
rbind(percentages,
c(i, length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])))
}
percentages
percentages = data.frame("year","percentage")
percentages = numeric(0)
for (i in 2000:2013){
percentages <-
rbind(percentages,
c(i, length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])))
}
percentages
percentages = data.frame("year","percentage")
percentages
colnames(percentages) = c("year", "percenteage")
percentages
percentages
percentages = numeric(0)
for (i in 2000:2013){
percentages <-
rbind(percentages,
c(i, length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])))
}
percentages
colnames(percentages) = c("year", "percentage")
percentages
histinfo
hist(percentages)
barplot(percentages)
table(percentages)
library(ggplot2)
library(ggplot)
ggplot(data=percentages, aes(x=year, y=percentage))
install.packages('ggplot2', dependencies = TRUE)
ggplot(data=percentages, aes(x=year, y=percentage))
ggplot2(data=percentages, aes(x=year, y=percentage))
library(ggplot2)
ggplot2(data=percentages, aes(x=year, y=percentage))
ggplot(data=percentages, aes(x=year, y=percentage))
as.data.frame(percentages)
ggplot(data=percentages, aes(x=year, y=percentage))
ts(percentages[,-1], start=2000, end=2013)
perc_ts <- ts(percentages[,-1], start=2000, end=2013)
barplot(perc_ts)
plot(perc_ts)
ggplot(perc_ts)
percentages = as.data.frame(percentages)
ggplot(percentages)
percentages
ggplot(data=percentages)
ggplot(data=percentages, aes(x=year,y=percentage))
pplot <- ggplot(data=percentages, aes(x=year, y=percentage))
d + geom_line()
pplot + geom_line()
repper = numeric(0)
for (i in 2000:2013){
repper <-
rbind(repper,
c(i, length(urls[urls[1]==i & urls[6]=="Replication" & urls[7]=="Information found"])/
length(urls[urls[1]==i & urls[6]=="Replication"])))
}
repper
repper = as.data.frame(repper)
with(allper, cor(year,percentage))
allper
allper = numeric(0)
for (i in 2000:2013){
allper <-
rbind(allper,
c(i, length(urls[urls[1]==i & urls[7]=="Information found"])/
length(urls[urls[1]==i])))
}
allper
# PLOTTING REPLICATION LINKS
repper = numeric(0)
for (i in 2000:2013){
repper <-
rbind(repper,
c(i, length(urls[urls[1]==i & urls[6]=="Replication" & urls[7]=="Information found"])/
length(urls[urls[1]==i & urls[6]=="Replication"])))
}
repper
with(allper, cor(year,percentage))
lm(allper - percentage ~ year)
colnames(allper) = c("year", "percentage")
lm(allper - percentage ~ year)
lm(allper = percentage ~ year)
lm(allper ~ percentage + year)
allper(percentage)
allper[percentage]
allper[1]
allper[2]
allper[14]
allper[15]
allper = as.data.frame(allper)
repper = as.data.frame(repper)
allper[15]
allper[1]
colnames(allper) = c("year", "percentage")
allper = as.data.frame(allper)
repper = as.data.frame(repper)
colnames(allper) = c("year", "percentage")
colnames(repper) = c("year", "percentage")
allper
lm(allper ~ percentage + year)
allper
allper[percentage]
lm(allper ~ year)
fit <- lm(percentage ~ year, data=allper)
fit
allfit <- lm(percentage ~ year, data=allper)
repfit <- lm(percentage ~ year, data=repper)
allfit
repfit
repplot <- ggplot(data=repper, aes(x=year, y=percentage))
repplot + geom_line()
lines(ggplot(data=allper, aes(x=year, y=percentage)))
lines(allper)
plot(allper)
lines(repper)
lines(allper)
lines(allper)
lines(allper)
plot(allper)
lines(allper)
points(repper)
lines(repper)
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.6,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(2.5,2.5),col=c("red","blue"))
legend(2000,0.6,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(1,2.5),col=c("red","blue"))
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.7,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.25,1),col=c("red","blue"))
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.2,0.5),col=c("red","blue"))
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.2,0.5),col=c("red","blue"))
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.15,0.5),col=c("red","blue"))
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.1,0.3),col=c("red","blue"))
plot(allper)
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.1,0.3),col=c("red","blue"))
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.1,0.2),col=c("red","blue"))
plot(allper, main = "How Many URLs Still Work?")
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.05,0.15),col=c("red","blue"))
plot(allper, main = "How Many URLs Still Work?")
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.05,0.1),col=c("red","blue"))
plot(allper, main = "How Many URLs Still Work?")
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.65,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.15,0.15),col=c("red","blue"))
plot(allper, main = "How Many URLs Still Work?")
lines(allper, col = "red")
points(repper)
lines(repper, col = "blue")
legend(2000,0.67,c("all URLs","replication URLs"),
lty=c(1,1),lwd=c(0.15,0.15),col=c("red","blue"))
view(allper)
View(allper)
View(repper)
start = 50
plot(capscore(shallow,start))
lines(capscore(deep,start),col="blue")
lines(capscore(slow,start),col="red")
lines(capscore(fast,start),col="green")
abline(h=20) # add horizontal line at y = 20 for reference
capscore <- function(user, start){
#   user = smooth(user)
#   user = clean(user)
allscore = NULL
allmax = NULL
allmin = NULL
score = start*constant
time <- function(i){user[i,1]}
depth <- function(i){user[i,2]}
scorefall <- function(x,y){fallrate*(time(x)-time(y))} # account for time gaps
# LOOP THROUGH AND UPDATE SCORE
for (i in 15:nrow(user)){
score = score - scorefall(i,i-1)
if(score > neardeath){riserate = goodrise} # recovery rate is faster when mmHg > 10
if(score <= neardeath){riserate = badrise} # recovery rate is slower when mmHg < 10
if(depth(i-2) < depth(i-1) & depth(i) < depth(i-1)){
allmax = rbind(allmax, c(depth(i-1),time(i-1))) # if max, store time + depth (for time reference)
score = (score + riserate*(maxalg(depth(i-1)))
+ riserate*((timealg(tail(allmax, n=1),
head(tail(allmax, n=2), n=1)))[2]))
#     score = print(score + riserate*(maxalg(depth(i-1)))
#                   + riserate*(timealg(tail(allmax,1)[1],
#                             head(tail(allmax,2),1)[1])))
#improper syntax here before, not grabbing single elements of allmax
}
if(depth(i-2) > depth(i-1) & depth(i) > depth(i-1)){
score = score + (riserate*minalg(depth(i-1)))
}
#   if(score > maxscore){  # whatever corresponds to a score of 25 mmHg or more
#     score = maxscore  # we could also drop the score a few points to allow "rewards" for continued good compressions
#   }
if(score < deathscore){  # Whatever corresponds to a score of 5 mmHg or less
return("point of no return")
}
allscore <- c(allscore, score)
}
print(tail(allscore,1)/constant)
return(allscore/constant)
}
maxalg <- function(depth){
if (mindepth < depth & depth < maxdepth){ # this works even though similar time function doesn't
return(depthscore)
}
if (depth > maxdepth){
return(depthscore-(depth_penalty*(depth-maxdepth)))
}
else return(depthscore-(shallow_penalty*(mindepth-depth)))
}
minalg <- function(depth){
if (depth == 0){
return(recoilscore)
}
else
return(recoilscore-depth) # score decreases linearly with partial recoil
}
timealg <- function(current,last){
if (current == last){last = 1} # prevents first rate from reading as "infinity"
rate = 60/(current-last)
toofast = 0
tooslow = 0
if(rate>speed_ceiling){toofast = 1}
if(rate<speed_floor){tooslow = 1}
x = (ratescore*((110-(abs(110-rate))^1.07) # raising exponent punishes speed (a little)
-(toofast*fastpunish)
-(tooslow*slowpunish)))
return(x)
}
constant = 50 # this factor controls the speed of ETCO2 movement. Higher = slower.
mindepth = 4.7
maxdepth = 6.2
speed_ceiling = 140 # above this, rate is very poor
speed_floor = 80 # below this, rate is very poor
depthscore = 50
recoilscore = depthscore
ratescore = 1
slowpunish = 15 # how much we punish each slow compression
fastpunish = 5 # how much we punish each fast compression
depth_penalty = 300 # how much we punish for overly deep compressions
shallow_penalty = 170 # how much we punish for overly shallow compressions
maxscore = 1250 # whatever corresponds to 25 mmHg
deathscore = 250 # whatever corresponds to 5 mmHg
neardeath = deathscore + ((maxscore-deathscore)/4) # 80% of the way to death
fallrate = 18
goodrise = 0.3    # everything but shallow makes sense at -0.2, shallow makes sense at 0.16
badrise = 0.6*goodrise   # Should still allow for rescue below 10 mmHg w/perfect CPR
start = 50
plot(capscore(shallow,start))
lines(capscore(deep,start),col="blue")
lines(capscore(slow,start),col="red")
lines(capscore(fast,start),col="green")
abline(h=20) # add horizontal line at y = 20 for reference
setwd("C:/Users/Aaron/Dropbox/code")
setwd('404/csv')
# Import and assign variables to all CSVs
file_list = list.files()
for (i in 1:length(file_list)){
assign(strsplit(file_list[i],".csv")[[1]],
read.csv(file_list[i]))
}
start = 50
plot(capscore(shallow,start))
lines(capscore(deep,start),col="blue")
lines(capscore(slow,start),col="red")
lines(capscore(fast,start),col="green")
abline(h=20) # add horizontal line at y = 20 for reference
start = 35
plot(capscore(shallow,start))
lines(capscore(deep,start),col="blue")
lines(capscore(slow,start),col="red")
lines(capscore(fast,start),col="green")
abline(h=20) # add horizontal line at y = 20 for reference
main="Capnography Score"
start = 35
plot(capscore(shallow,start))
lines(capscore(deep,start),col="blue")
lines(capscore(slow,start),col="red")
lines(capscore(fast,start),col="green",main="Capnography Score")
abline(h=20) # add horizontal line at y = 20 for reference
start = 35
plot(capscore(shallow,start),main="Capnography Score")
lines(capscore(deep,start),col="blue")
lines(capscore(slow,start),col="red")
lines(capscore(fast,start),col="green")
abline(h=20) # add horizontal line at y = 20 for reference
